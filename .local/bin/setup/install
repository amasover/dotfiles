#!/usr/bin/env bash

## update pacman
sudo pacman -Syu --noconfirm
## rank mirrors by speed and filter out out of date mirrors
##sudo pacman-mirrors -g
sudo pacman-optimize && sync

common_pacman_packages="
    xorg-server
    jq
    xorg-xinit
    vim
    zsh
    keychain
    xclip
    python-pip
    firefox
    termite
    rofi
    emacs
    compton
    pulseaudio
    pavucontrol
    pamixer
    alsa-utils
    feh
    docker
    docker-compose
    thunar
    htop
    tumbler
    weechat
    xbindkeys
    tree
    facter
    xf86-video-vesa
    nvidia
    scrot
    i3lock
    ranger
    fcron
    dunst
    qutebrowser
    xorg-xfd
    screenfetch
    remmina
    libreoffice-fresh
    task
    gtop
    perl-anyevent-i3
    rustup
    nmap
    freerdp
    go-tools
    ntp
    networkmanager-dispatcher-ntpd
    bitlbee
    ncurses
    fftw
    mirage
    gvim
    groovy
"

# https://github.com/dpayne/cli-visualizer
# pacman:
#    ncurses
#    fftw
# aur:
#    cli-visualizer


# list of packages no longer used
# to be removed from system to avoid issues
remove_packages="
    ttf-font-awesome
    i3blocks-gaps-git
"

# virtualbox-guest-modules-arch
virtualbox_packages="
    virtualbox-guest-utils
"

physical_packages="
"

# install common packages
for package_name in $common_pacman_packages; do
  sudo pacman -S $package_name --needed --noconfirm --quiet
done

# install/update packages for virtualbox or physical install
[[ "$(facter is_virtual)" == true ]] && \
    host_specific_pkgs=$virtualbox_packages || \
        host_specific_pkgs=$physical_packages

echo 'installing host specific packages'
for package_name in $host_specific_pkgs; do
    sudo pacman -S $package_name --needed --noconfirm
done

echo 'removing packages that are no longer needed'
for package_name in $remove_packages; do
    sudo pacman -R --noconfirm
done


## if the docker daemon isn't active, set it up
systemctl -q is-active docker
if [[ $? -ne 0 ]] ; then
    echo "Docker isn't running"
    ## refer to docker daemon documentation for further details:
    ## https://docs.docker.com/engine/installation/linux/linux-postinstall/
    ## create a group for docker
    sudo groupadd docker
    ## add current user to it so that you dont have to issue sudo everytime
    sudo usermod -aG docker $USER
    ## make sure the docker daemon starts on boot
    sudo systemctl enable docker
    ## start the docker daemon
    sudo systemctl start docker
    echo "Docker now running and set to run on boot. User added to group"
fi

## set zsh to default shell
if [[ "$(echo $SHELL)" != "/usr/bin/zsh" ]]; then
  chsh -s $(which zsh)
  echo "shell set to zsh"
fi

## Install oh-my-zsh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

## Python package installs
## Install wakatime
sudo pip install wakatime
pip install --upgrade --user awscli

## Install Vundle
## commented out check for directory because it already exists. need to solve this problem another way.
#if [[ ! -d /home/han/.vim/bundle/Vundle.vim ]]; then
git clone https://github.com/VundleVim/Vundle.vim.git /home/$USER/.vim/bundle/Vundle.vim
#fi

## Install NVM if nvm shell sript not downloaded
if [[ ! -f .nvm/nvm.sh ]]; then
  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash
  . ~/.nvm/nvm.sh ## source nvm
  node_version=$(<~/.nvmrc)
  nvm install $node_version
  npm i -g tern ## tern is used for the javascript layer in emacs
else
    echo "NVM already installed, skipping..."
fi

mkdir -p $HOME/code

## Set yadm remote to .ssh
yadm remote set-url origin git@github.com:patrick-motard/dotfiles.git

## Install Spacemacs
if [[ ! -d ~/.emacs.d/.git ]]; then
  git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
fi

## Commenting this out.. not sure if it is needed 2/4/18
## use vmware setupscript (works with virtualbox)
# if [[ ! -d ~/Downloads/vmware-tools/.git ]]; then
#   git clone https://github.com/rasa/vmware-tools-patches.git ~/Downloads/vmware-tools/
#   sudo sh /home/han/Downloads/vmware-tools/patched-open-vm-tools.sh
# fi

## RUST
rustup install stable
rustup default stable
## END RUST

## install yaourt packages
export yaourt_packages="
  awesome-terminal-fonts
  i3-gaps-next-git
  xorg-xprop
  hipchat
  gtk-theme-arc-git
  paper-icon-theme-git
  spotify
  ccat
  exa-git
  dropbox
  rtv
  dunstify
  siji-git
  xorg-xset
  bashmount
  remmina-plugin-rdesktop
  trizen
  polybar-git
  pgadmin4
  cli-visualizer
  slack-desktop
  slack-term
  teams-for-linux
"


for yaourt_package in $yaourt_packages; do
  yaourt -S --needed $yaourt_package --noconfirm
done


# TODO: create function the installs code
# code=( "nodejs" "rust" "golang" "awscli" "azcli" )
# function install_code() {
#     for c in $code; do
#         echo c
#     done
# }


# needed for spacemacs go layer
# https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Blang/go
mkdir -p $GOPATH/src/github.com
go get -u -v github.com/nsf/gocode
go get -u -v github.com/rogpeppe/godef
go get -u -v golang.org/x/tools/cmd/guru
go get -u -v golang.org/x/tools/cmd/gorename
go get -u -v golang.org/x/tools/cmd/goimports
